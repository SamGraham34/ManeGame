/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.manegame;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.SQLException;
import java.time.Duration;
import java.time.Instant;
import org.apache.maven.shared.utils.StringUtils;

/**
 *  This class opens a new JFrame as the game interface for the user.
 * @author Sam
 */
public class LevelGUI extends javax.swing.JFrame {
   
    private Timer timer;
    private Timer sleeper;
    DeductionObject taxCollector;
    DeductionObject stateInspector;
    DeductionObject landLord;
    public static List<JLabel> deductObjects = new ArrayList<>();
    List<JLabel> benefitObjects = new ArrayList<>();
    public static List<JLabel> barrierObjects = new ArrayList<>();
    int numOfBarriers = 8;
    int numOfBenefitObjects = 72;
    public static int MAX_Y_AXIS = 506;
    public static int MIN_Y_AXIS = 25;
    public static int MAX_X_AXIS = 480;
    public static int MIN_X_AXIS = 50;
    int MIN_DIST_TO_ICON = 25;
    int SPACE_BETWEEN_BENEFIT_OBJECTS = 60;
    public static JLabel playerIcon;
    long playerScore;
    int playerSpeed;
    Instant start = Instant.now();
    Player player;
    
    

    /**
     * Creates new form LevelGUI
     * @param p
     */
    public LevelGUI (Player p){
        
        player = p;
        playerSpeed = 6;
        
        addPlayerIcon();
        addDeductIcons();
        addBenefitIcons();
        //addHorizontalBarrierIcons();
        addVerticalBarrierIcons();
        
        initComponents();
        lblPlayerName.setText(p.playerName);
        lblLevel.setText(Integer.toString(p.playerLevel));
        playerScore = p.playerScore;
        lblScore.setText(Long.toString(playerScore)); 
        
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                Instant finish = Instant.now();
                Duration gameTime = Duration.between(start, finish);
                long gameInSeconds = gameTime.getSeconds();
                JOptionPane.showMessageDialog(null,Long.toString(gameInSeconds));
                long gameInMinutes = gameInSeconds /  60;
                JOptionPane.showMessageDialog(null,Long.toString(gameInMinutes));
                long gameInHours = gameInMinutes / 60;
                // HH:MM:SS
                String gameTimeString = Long.toString(gameInHours) + ":" 
                + StringUtils.leftPad(Long.toString(gameInMinutes), 2, "0") + ":" 
                + StringUtils.leftPad(Long.toString(gameInSeconds % 60), 2, "0");
                try {
                     ManeDB.dbLogEndEvent(player, gameTimeString);
                     ManeDB.dbSaveCurrentStatus(player, player.playerLevel, playerScore);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(LevelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null,"Failed to log");
                } catch (SQLException ex) {
                    Logger.getLogger(LevelGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        try {
            ManeDB.dbLogBeginEvent(p.playerID);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LevelGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,"Failed to connect to "
                    + "database your game is not being logged.");
        }    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPlayerName = new javax.swing.JLabel();
        lblTitleScore = new javax.swing.JLabel();
        lblScore = new javax.swing.JLabel();
        lblTitleLevel = new javax.swing.JLabel();
        lblLevel = new javax.swing.JLabel();
        lblTimer = new javax.swing.JLabel();
        btnStart = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setPreferredSize(new java.awt.Dimension(570, 650));
        setResizable(false);
        setSize(new java.awt.Dimension(570, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                Close_Event(evt);
            }
        });
        getContentPane().setLayout(null);

        lblPlayerName.setText("Player's Name");
        getContentPane().add(lblPlayerName);
        lblPlayerName.setBounds(0, 0, 66, 13);

        lblTitleScore.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTitleScore.setText("Score:");
        getContentPane().add(lblTitleScore);
        lblTitleScore.setBounds(72, 0, 53, 13);

        lblScore.setText("88888888888");
        getContentPane().add(lblScore);
        lblScore.setBounds(131, 0, 53, 13);

        lblTitleLevel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTitleLevel.setText("Level:");
        getContentPane().add(lblTitleLevel);
        lblTitleLevel.setBounds(190, 0, 53, 13);

        lblLevel.setText("XXX");
        getContentPane().add(lblLevel);
        lblLevel.setBounds(249, 0, 31, 13);

        lblTimer.setText("Timer");
        getContentPane().add(lblTimer);
        lblTimer.setBounds(443, 0, 59, 13);

        btnStart.setText("Start");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });
        btnStart.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                playerDirectionChange(evt);
            }
        });
        getContentPane().add(btnStart);
        btnStart.setBounds(240, 560, 69, 21);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed

        timer = new Timer(5, new ActionListener(){
            
            @Override
            public void actionPerformed(ActionEvent e){
                
                for (JLabel d : deductObjects){ 
                    if (playerIcon.getLocation().x > d.getLocation().x - MIN_DIST_TO_ICON &&
                            playerIcon.getLocation().x < (d.getLocation().x + MIN_DIST_TO_ICON) &&
                            playerIcon.getLocation().y > (d.getLocation().y - MIN_DIST_TO_ICON) && 
                            playerIcon.getLocation().y < (d.getLocation().y + MIN_DIST_TO_ICON) &&
                            d.isShowing() == true){
                                d.setVisible(false);
                                deductIconSleeper(d);
                                playerScore -= DeductionObject.hitDeductionObject(deductObjects.indexOf(d));
                                if (playerScore < 0) {
                                    playerScore = 0;
                                    playerSpeed = 3;
                                }
                    }
                    Graphic.objectMove(d);                     
                } 
               
                for (JLabel b : benefitObjects){
                    int benefitAmount = 0;
                    if ((playerIcon.getLocation().x > (b.getLocation().x - MIN_DIST_TO_ICON) &&
                            playerIcon.getLocation().x < (b.getLocation().x + MIN_DIST_TO_ICON)) &&
                            (playerIcon.getLocation().y > (b.getLocation().y - MIN_DIST_TO_ICON) && 
                            playerIcon.getLocation().y < (b.getLocation().y + MIN_DIST_TO_ICON)) &&
                            b.isShowing() == true){
                        benefitAmount = BenefitObject.hitBenefitObject(benefitObjects.indexOf(b));
                        playerScore += benefitAmount;
                        b.setVisible(false);
                        --numOfBenefitObjects;
                    }
                    lblScore.setText(Long.toString(playerScore));
                }
            }                           
        });
        timer.start();
    }//GEN-LAST:event_btnStartActionPerformed

    private void playerDirectionChange(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_playerDirectionChange
        if( (evt.getKeyCode() == KeyEvent.VK_DOWN) && (playerIcon.getLocation().y <= MAX_Y_AXIS) ){
            if (Graphic.hitBottomBarrier(playerIcon) == false) {
                playerIcon.setLocation(playerIcon.getLocation().x, playerIcon.getLocation().y + playerSpeed);
            }
        }   
        if( (evt.getKeyCode() == KeyEvent.VK_UP) && (playerIcon.getLocation().y >= MIN_Y_AXIS) ){
            if (Graphic.hitTopBarrier(playerIcon) == false){
                   playerIcon.setLocation(playerIcon.getLocation().x, playerIcon.getLocation().y - playerSpeed);
            }
        }
        if( (evt.getKeyCode() == KeyEvent.VK_LEFT) && (playerIcon.getLocation().x >= MIN_X_AXIS) ){
            if (Graphic.hitLeftBarrier(playerIcon) == false){
                   playerIcon.setLocation(playerIcon.getLocation().x - playerSpeed, playerIcon.getLocation().y);
            }
        }
        if( (evt.getKeyCode() == KeyEvent.VK_RIGHT) && (playerIcon.getLocation().x <= MAX_X_AXIS) ){
            if (Graphic.hitRightBarrier(playerIcon) == false){
                   playerIcon.setLocation(playerIcon.getLocation().x + playerSpeed, playerIcon.getLocation().y);
            }
        }
    }//GEN-LAST:event_playerDirectionChange

    private void Close_Event(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_Close_Event
        Instant finish = Instant.now();
        Duration gameTime = Duration.between(start, finish);
        long gameInSeconds = gameTime.getSeconds();
        long gameInMinutes = gameInSeconds /  60;
        long gameInHours = gameInMinutes / 60;
        // HH:MM:SS
        String gameTimeString = Long.toString(gameInHours) + ":" 
                + StringUtils.leftPad(Long.toString(gameInMinutes % 60), 2, "0") + ":" 
                + StringUtils.leftPad(Long.toString(gameInSeconds % 60), 2, "0");
        try {
            ManeDB.dbLogEndEvent(player, gameTimeString);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LevelGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_Close_Event

    /**
     * @param p the command line arguments
     */
    public static void main (Player p) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LevelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LevelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LevelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LevelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LevelGUI(p).setVisible(true);
            }
        });
    }
    
    public final void addDeductIcons(){
       
        landLord = new DeductionObject();        
        JLabel landLord0 = landLord.deductionObjectImage(0);
        deductObjects.add(landLord0);
        add(landLord0, BorderLayout.CENTER);
        landLord0.setVisible(true);      
        
        taxCollector = new DeductionObject();
        JLabel taxCollector1 = taxCollector.deductionObjectImage(1);
        deductObjects.add(taxCollector1);
        add(taxCollector1, BorderLayout.CENTER);
        taxCollector1.setVisible(true);
        
        stateInspector = new DeductionObject();
        JLabel stateInspector2 = stateInspector.deductionObjectImage(2);
        deductObjects.add(stateInspector2);
        add(stateInspector2, BorderLayout.CENTER);
        stateInspector2.setVisible(true);                      
    }
       
    /**
     * Adds the player icon to the board.
     */
    public final void addPlayerIcon(){
         
        playerIcon = PlayerIcon.playerIconImage();
        add(playerIcon, BorderLayout.CENTER);
        playerIcon.setLocation(MIN_X_AXIS, MIN_Y_AXIS);
        playerIcon.setVisible(true);  
    }
    
    public final void addVerticalBarrierIcons(){
        int barrierWidth = 15;
        int barrierHeight = 100;
        int j = 0;
        
        for ( int barrierXaxis = SPACE_BETWEEN_BENEFIT_OBJECTS; barrierXaxis < MAX_X_AXIS; barrierXaxis += SPACE_BETWEEN_BENEFIT_OBJECTS ) {

            if (barrierXaxis % (SPACE_BETWEEN_BENEFIT_OBJECTS*2) == 0){
                barrierObjects.add(Graphic.getVerticalBarrier("D:\\Sam\\Pictures\\Mane Game\\BLUE.jpg"));
                add(barrierObjects.get(j), BorderLayout.CENTER);
                barrierObjects.get(j).setLocation(barrierXaxis + 27, MIN_Y_AXIS);
                barrierObjects.get(j).setVisible(true);
                j++;
                barrierObjects.add(Graphic.getVerticalBarrier("D:\\Sam\\Pictures\\Mane Game\\BLUE.jpg"));
                add(barrierObjects.get(j), BorderLayout.CENTER);
                barrierObjects.get(j).setLocation(barrierXaxis + 27, MAX_Y_AXIS - barrierHeight);
                barrierObjects.get(j).setVisible(true);
                j++;
            }
            else {

                barrierObjects.add(Graphic.getVerticalBarrier("D:\\Sam\\Pictures\\Mane Game\\BLUE.jpg"));
                add(barrierObjects.get(j), BorderLayout.CENTER);
                barrierObjects.get(j).setLocation(barrierXaxis + 27, (MAX_Y_AXIS/2) - (barrierHeight/2) + MIN_Y_AXIS);
                barrierObjects.get(j).setVisible(true);      
                j++;
            }
            
        }
        
    }
        public final void addHorizontalBarrierIcons(){
        int barrierWidth = 50;
        int barrierHeight = 15;
        int j = 0;
        
        for ( int barrierYaxis = 200; barrierYaxis < MAX_Y_AXIS; barrierYaxis += SPACE_BETWEEN_BENEFIT_OBJECTS ) {

            if (barrierYaxis % (200) == 0){
                barrierObjects.add(Graphic.getHorizontalBarrier("D:\\Sam\\Pictures\\Mane Game\\BLUE.jpg"));
                add(barrierObjects.get(j), BorderLayout.CENTER);
                barrierObjects.get(j).setLocation(100, barrierYaxis);              
                barrierObjects.get(j).setVisible(true);
                j++;
                
                barrierObjects.add(Graphic.getHorizontalBarrier("D:\\Sam\\Pictures\\Mane Game\\BLUE.jpg"));
                add(barrierObjects.get(j), BorderLayout.CENTER);
                barrierObjects.get(j).setLocation(MAX_X_AXIS - barrierWidth, barrierYaxis);
                barrierObjects.get(j).setVisible(true);
                j++;
            }
            else {
                barrierObjects.add(Graphic.getHorizontalBarrier("D:\\Sam\\Pictures\\Mane Game\\BLUE.jpg"));
                add(barrierObjects.get(j), BorderLayout.CENTER);
                barrierObjects.get(j).setLocation((MAX_X_AXIS/2) - (barrierWidth/2) + MIN_X_AXIS, barrierYaxis);
                barrierObjects.get(j).setVisible(true);  
                j++;
            }
            
        }
        
    }
 
    public final void addBenefitIcons(){
        int benefitObjectXaxis = MIN_X_AXIS;
        int benefitObjectYaxis = MIN_Y_AXIS;
        
        // Loop through the number of benefit objects
        // add JLabel for each object.
        for (int i = 0; i < numOfBenefitObjects; i++) {
            if (benefitObjectYaxis < MAX_Y_AXIS) {
                BenefitObject benefitIcon = new BenefitObject();        
                if (i % 3 == 0){
                    benefitObjects.add(benefitIcon.benefitObjectImage(1));
                    }
                else if (i % 2 == 0){
                    benefitObjects.add(benefitIcon.benefitObjectImage(2));
                }
                else {
                    benefitObjects.add(benefitIcon.benefitObjectImage(0));
                }
                // add the new JLabel to the board.
                add(benefitObjects.get(i), BorderLayout.CENTER);
                // set the benefit object location.
                benefitObjects.get(i).setLocation(benefitObjectXaxis, benefitObjectYaxis);
                benefitObjects.get(i).setVisible(true);  
                benefitObjectYaxis += SPACE_BETWEEN_BENEFIT_OBJECTS;
            }
            // start a new column of benefit objects.
            if (benefitObjectYaxis >= MAX_Y_AXIS){
                benefitObjectXaxis += SPACE_BETWEEN_BENEFIT_OBJECTS;
                benefitObjectYaxis = MIN_Y_AXIS;
            }
        }  
    }
    
    private void deductIconSleeper(JLabel d){
       
        sleeper = new Timer(5000, new ActionListener(){
       // ActionListener iconSleeper = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
            d.setVisible(true);
            playerSpeed = 6;
            }
        });
        sleeper.restart();

    }
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStart;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblLevel;
    private javax.swing.JLabel lblPlayerName;
    private javax.swing.JLabel lblScore;
    private javax.swing.JLabel lblTimer;
    private javax.swing.JLabel lblTitleLevel;
    private javax.swing.JLabel lblTitleScore;
    // End of variables declaration//GEN-END:variables

}
